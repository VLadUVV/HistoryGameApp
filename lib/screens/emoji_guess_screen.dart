import 'dart:async';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:audioplayers/audioplayers.dart';
import '../models/emoji_question.dart';

class EmojiGuessScreen extends StatefulWidget {
  @override
  State<EmojiGuessScreen> createState() => _EmojiGuessScreenState();
}

class _EmojiGuessScreenState extends State<EmojiGuessScreen> {
  List<EmojiQuestion> filteredQuestions = [];
  int currentIndex = 0;
  int score = 0;
  int bestScore = 0;
  int timer = 10;
  Timer? countdown;
  bool answered = false;
  int? selectedIndex;
  final player = AudioPlayer();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) => _loadQuestions());
  }
  void _loadQuestions() {
    final args = ModalRoute.of(context)!.settings.arguments as Map?;
    final String era = args?['era'] ?? '';
    final String historyType = args?['historyType'] ?? '';

    filteredQuestions = allEmojiQuestions
      .where((q) => q.era == era && q.historyType == historyType)
      .toList();

    if(filteredQuestions.isEmpty) {
      _showEmptyDialog();
    } else {
      _loadBestScore();
      _startTimer();
    }
  }
  void _startTimer() {
    timer = 60;
    countdown?.cancel();
    countdown = Timer.periodic(Duration(seconds: 1), (t) {
      setState(() {
        timer--;
        if(timer == 0) {
          t.cancel();
          _handleAnswer(null);
        }
      });
    });
  }
  void _showEmptyDialog() {
    showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: Text('–û—Ç—Å—É—Ç–≤—É—é—Ç –≤–æ–ø—Ä–æ—Å—ã'),
          content: Text('–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–ø–æ—Ö–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.'),
          actions: [
            TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pop(context);
                },
                child: Text('–ù–∞–∑–∞–¥'),
            ),
          ],
        ),
    );
  }

  Future<void> _loadBestScore() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      bestScore = prefs.getInt('best_emoji_score') ?? 0;
    });
  }

  Future<void> _saveBestScore () async {
    final prefs = await SharedPreferences.getInstance();
    if (score > bestScore) {
      await prefs.setInt('best_emoji_score', score);
    }
  }

  Future<void> _handleAnswer(int? index) async {
    if (answered) return;

    setState(() {
      answered = true;
      selectedIndex = index;
      final correct = index != null && index == filteredQuestions[currentIndex].correctIndex;
      if (correct) {
        score++;
        player.play(AssetSource('audio/correct.mp3'));
      } else {
        player.play(AssetSource('audio/wrong.mp3'));
      }
    });

    countdown?.cancel();

    await Future.delayed(Duration(seconds: 2));

    if (currentIndex < filteredQuestions.length - 1) {
      setState(() {
        currentIndex++;
        answered = false;
        selectedIndex = null;
      });
      _startTimer();
    } else {
      await _saveBestScore();
      _showResultDialog();
    }
  }
  void _showResultDialog() {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞'),
        content: Text(
            '–í—ã –Ω–∞–±—Ä–∞–ª–∏ $score ${pluralize('–û—á–∫–æ', score)}'
            ' –∏–∑ ${filteredQuestions.length} ${pluralize('–í–æ–ø—Ä–æ—Å', filteredQuestions.length)}. \n'
            '–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score > bestScore ? score : bestScore} ${pluralize('–û—á–∫–æ', score >  bestScore ? score : bestScore)}'
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pop(context);
            },
            child: Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }

  String getSecondLabel(int number) {
    final n = number % 100;
    if (n >= 11 && n <= 14) return '—Å–µ–∫—É–Ω–¥';
    switch (n % 10) {
      case 1:
        return '—Å–µ–∫—É–Ω–¥–∞';
      case 2:
      case 3:
      case 4:
        return '—Å–µ–∫—É–Ω–¥—ã';
      default:
        return '—Å–µ–∫—É–Ω–¥';
    }
  }

  String pluralize(String word, int number) {
    final n = number % 100;
    if (n >= 11 && n <= 14) {
      return word == '–≤–æ–ø—Ä–æ—Å' ? '–≤–æ–ø—Ä–æ—Å–æ–≤' : '–æ—á–∫–æ–≤';
    }
    switch (n % 10) {
      case 1:
        return word;
      case 2:
      case 3:
      case 4:
        return word == '–≤–æ–ø—Ä–æ—Å' ? '–≤–æ–ø—Ä–æ—Å–∞' : '–æ—á–∫–∞';
      default:
        return word == '–≤–æ–ø—Ä–æ—Å' ? '–≤–æ–ø—Ä–æ—Å–æ–≤' : '–æ—á–∫–æ–≤';
    }
  }

  @override
  void disponce() {
    countdown?.cancel();
    player.dispose();
  }
  @override
  Widget build(BuildContext context) {
    if(filteredQuestions.isEmpty) {
      return Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    final question = filteredQuestions[currentIndex];

    return Scaffold(
      appBar: AppBar(
        title: Text('–£–≥–∞–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –ø–æ —ç–º–æ–¥–∑–∏'),
        backgroundColor: Colors.deepOrangeAccent,
      ),
      body: Stack(
        children: [
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/images/fon_main.jpg'),
                fit: BoxFit.cover,
            ),
          ),
        ),
       Padding(
         padding: const EdgeInsets.all(24.0),
         child: Column(
           children: [
             Text('–í—Ä–µ–º—è: $timer —Å–µ–∫', style: TextStyle(color: Colors.red)),
             SizedBox(height: 20),
             Text(question.emojis, style: TextStyle(fontSize: 40)),
             SizedBox(height: 24),
             ...List.generate(question.options.length, (index) {
               final isCorrect = index == question.correctIndex;
               final isSelected = index == selectedIndex;
               final color = !answered
                   ?Colors.white
                   : isCorrect
                       ? Colors.green
                       : isSelected
                         ? Colors.red
                         : Colors.white;
               return Container(
                 margin: EdgeInsets.symmetric(vertical: 6),
                 width: double.infinity,
                 child: ElevatedButton(
                     onPressed: () => _handleAnswer(index),
                     style: ElevatedButton.styleFrom(
                       backgroundColor: color.withOpacity(0.8),
                       foregroundColor: Colors.black,
                       padding: EdgeInsets.symmetric(vertical: 14),
                     ),
                     child: Text(question.options[index]),
                    ),
                  );
                }),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
final List<EmojiQuestion> allEmojiQuestions = [
  // –ê–ù–¢–ò–ß–ù–û–°–¢–¨ ‚Äî –ú–ò–†–û–í–ê–Ø –ò–°–¢–û–†–ò–Ø
  EmojiQuestion(
    emojis: 'üåãüèõÔ∏è‚ò†Ô∏è',
    options: ['–ò–∑–≤–µ—Ä–∂–µ–Ω–∏–µ –í–µ–∑—É–≤–∏—è –∏ –≥–∏–±–µ–ª—å –ü–æ–º–ø–µ–π', '–ü–∞–¥–µ–Ω–∏–µ –†–∏–º—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏', '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–∞—è —á—É–º–∞', '–ü–æ–∂–∞—Ä –≤ –†–∏–º–µ'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üé≠üèõÔ∏èüìú',
    options: ['–ê–Ω—Ç–∏—á–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞', '–†–µ–Ω–µ—Å—Å–∞–Ω—Å', '–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ', '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üèõÔ∏è‚öîÔ∏èüëë',
    options: ['–†–∏–º—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π', '–ì—Ä–µ–∫–æ-–ø–µ—Ä—Å–∏–¥—Å–∫–∏–µ –≤–æ–π–Ω—ã', '–ü–∞–¥–µ–Ω–∏–µ –ö–∞—Ä—Ñ–∞–≥–µ–Ω–∞'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: '‚öîÔ∏èüêéüè∫',
    options: ['–°–ø–∞—Ä—Ç–∞ –∏ –ê—Ñ–∏–Ω—ã', '–í–æ–π–Ω–∞ –†–æ–∑', '–¢—Ä–æ—è–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞', '–í–∞—Ä—Ñ–æ–ª–æ–º–µ–µ–≤—Å–∫–∞—è –Ω–æ—á—å'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üè∫üìúüèõÔ∏è',
    options: ['–§–∏–ª–æ—Å–æ—Ñ–∏—è –î—Ä–µ–≤–Ω–µ–π –ì—Ä–µ—Ü–∏–∏', '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–∞—è —Ç–µ–æ–ª–æ–≥–∏—è', '–†–µ–Ω–µ—Å—Å–∞–Ω—Å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ', '–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),

  // –°–†–ï–î–ù–ï–í–ï–ö–û–í–¨–ï ‚Äî –ú–ò–†–û–í–ê–Ø –ò–°–¢–û–†–ò–Ø
  EmojiQuestion(
    emojis: 'üõ°Ô∏è‚öîÔ∏è‚úùÔ∏è',
    options: ['–ö—Ä–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Ö–æ–¥—ã', '–§–µ–æ–¥–∞–ª—å–Ω–∞—è —Ä–∞–∑–¥—Ä–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å', '–†–µ—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üè∞üë∏üó°Ô∏è',
    options: ['–§–µ–æ–¥–∞–ª–∏–∑–º', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ê–Ω—Ç–∏—á–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞', '–†–µ–Ω–µ—Å—Å–∞–Ω—Å'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: '‚õ™üî•üìú',
    options: ['–ò–Ω–∫–≤–∏–∑–∏—Ü–∏—è', '–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ', '–í–µ–ª–∏–∫–∞—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ö–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: '‚öîÔ∏èüèπüèá',
    options: ['–°—Ç–æ–ª–µ—Ç–Ω—è—è –≤–æ–π–Ω–∞', '–ü–∞–¥–µ–Ω–∏–µ –†–∏–º–∞', '–†–∏–º—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞', '–†–µ—Ñ–æ—Ä–º–∞—Ü–∏—è'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üìúüìñüïäÔ∏è',
    options: ['–ú–∞–≥–Ω–∞ –ö–∞—Ä—Ç–∞', '–í–µ–ª–∏–∫–∞—è —Ö–∞—Ä—Ç–∏—è –≤–æ–ª—å–Ω–æ—Å—Ç–µ–π', '–ü–µ—Ä–∏–æ–¥ –†–µ–Ω–µ—Å—Å–∞–Ω—Å–∞', '–¢—Ä–∏–¥—Ü–∞—Ç–∏–ª–µ—Ç–Ω—è—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),

  // –ù–û–í–û–ï –í–†–ï–ú–Ø ‚Äî –ú–ò–†–û–í–ê–Ø –ò–°–¢–û–†–ò–Ø
  EmojiQuestion(
    emojis: 'üõ≥Ô∏èüåç‚öì',
    options: ['–û—Ç–∫—Ä—ã—Ç–∏–µ –ê–º–µ—Ä–∏–∫–∏', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–∏–∫–∏–Ω–≥–æ–≤', '–í–µ–ª–∏–∫–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è', '–†—É—Å—Å–∫–æ-—Ç—É—Ä–µ—Ü–∫–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 2,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: '‚öôÔ∏èüè≠üí°',
    options: ['–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ', '–≠–ª–µ–∫—Ç—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', '–ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üß™üî¨üíâ',
    options: ['–ù–∞—É—á–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–†–µ–Ω–µ—Å—Å–∞–Ω—Å', '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üè∞üëëüìú',
    options: ['–ê–±—Å–æ–ª—é—Ç–∏–∑–º', '–§–µ–æ–¥–∞–ª–∏–∑–º', '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å', '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üìúüóΩüïäÔ∏è',
    options: ['–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ü–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),

  // –°–û–í–†–ï–ú–ï–ù–ù–û–°–¢–¨ ‚Äî –ú–ò–†–û–í–ê–Ø –ò–°–¢–û–†–ò–Ø
  EmojiQuestion(
    emojis: 'üì±üñ•Ô∏èüåê',
    options: ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —ç–ø–æ—Ö–∞', '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–π–Ω–∞', '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≥–æ–Ω–∫–∞', '–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üë©‚ÄçüöÄüá∫üá∏üåï',
    options: ['–í—ã—Å–∞–¥–∫–∞ –Ω–∞ –õ—É–Ω—É', '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≥–æ–Ω–∫–∞', '–ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å–º–æ—Å–µ', '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üí£üåç‚öîÔ∏è',
    options: ['–í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞', '–ü–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞', '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–π–Ω–∞', '–í–æ–π–Ω–∞ –≤ –ö–æ—Ä–µ–µ'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üïäÔ∏èüåçü§ù',
    options: ['–°–æ–∑–¥–∞–Ω–∏–µ –û–û–ù', '–ù–ê–¢–û', '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–π–Ω–∞', '–í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),
  EmojiQuestion(
    emojis: 'üåêüìàüíª',
    options: ['–ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è', '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–ù–∞—É—á–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–†–µ–Ω–µ—Å—Å–∞–Ω—Å'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ú–∏—Ä–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
  ),

  // –ê–ù–¢–ò–ß–ù–û–°–¢–¨ ‚Äî –ò–°–¢–û–†–ò–Ø –†–û–°–°–ò–ò
  EmojiQuestion(
    emojis: 'üèπüõ°Ô∏èüèûÔ∏è',
    options: ['–î—Ä–µ–≤–Ω–∏–µ —Å–ª–∞–≤—è–Ω–µ', '–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ –Ω–∞—à–µ—Å—Ç–≤–∏–µ', '–ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏', '–ü–µ—Ä–∏–æ–¥ –∫–Ω—è–∂–µ–Ω–∏–π'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üè∞üõ°Ô∏è‚öîÔ∏è',
    options: ['–ü–µ—Ä–∏–æ–¥ –ö–∏–µ–≤—Å–∫–æ–π –†—É—Å–∏', '–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ –Ω–∞—à–µ—Å—Ç–≤–∏–µ', '–°–º—É—Ç–Ω–æ–µ –≤—Ä–µ–º—è', '–≠–ø–æ—Ö–∞ –ò–≤–∞–Ω–∞ –ì—Ä–æ–∑–Ω–æ–≥–æ'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: '‚õ™‚úùÔ∏èüåä',
    options: ['–ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏', '–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ –Ω–∞—à–µ—Å—Ç–≤–∏–µ', '–û—Å–Ω–æ–≤–∞–Ω–∏–µ –ú–æ—Å–∫–≤—ã', '–ü–µ—Ä–∏–æ–¥ —Ä–∞–∑–¥—Ä–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: '‚öîÔ∏èüêéüåæ',
    options: ['–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ –Ω–∞—à–µ—Å—Ç–≤–∏–µ', '–ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –î—Ä–µ–≤–Ω–µ—Ä—É—Å—Å–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', '–†—É—Å—Å–∫–æ-—Ç–∞—Ç–∞—Ä—Å–∫–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üõ°Ô∏èüè∞üëë',
    options: ['–í–ª–∞–¥–∏–º–∏—Ä –°–≤—è—Ç–æ—Å–ª–∞–≤–∏—á', '–Ø—Ä–æ—Å–ª–∞–≤ –ú—É–¥—Ä—ã–π', '–ò–≤–∞–Ω –ö–∞–ª–∏—Ç–∞', '–î–º–∏—Ç—Ä–∏–π –î–æ–Ω—Å–∫–æ–π'],
    correctIndex: 0,
    era: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),

  // –°–†–ï–î–ù–ï–í–ï–ö–û–í–¨–ï ‚Äî –ò–°–¢–û–†–ò–Ø –†–û–°–°–ò–ò
  EmojiQuestion(
    emojis: '‚öîÔ∏èüêéüè∞',
    options: ['–ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞', '–õ–µ–¥–æ–≤–æ–µ –ø–æ–±–æ–∏—â–µ', '–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ –Ω–∞—à–µ—Å—Ç–≤–∏–µ', '–°—Ç–æ –ª–µ—Ç–Ω—è—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üïç‚õ™üé®',
    options: ['–ö—É–ª—å—Ç—É—Ä–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∫–Ω—è–∂–µ—Å—Ç–≤–∞', '–†–µ–Ω–µ—Å—Å–∞–Ω—Å', '–ü–µ—Ç—Ä–æ–≤—Å–∫–∏–µ —Ä–µ—Ñ–æ—Ä–º—ã', '–ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üè∞üëëüõ°Ô∏è',
    options: ['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', '–ü–µ—Ä–∏–æ–¥ —Ä–∞–∑–¥—Ä–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏', '–≠–ø–æ—Ö–∞ –ò–≤–∞–Ω–∞ –ì—Ä–æ–∑–Ω–æ–≥–æ', '–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ –Ω–∞—à–µ—Å—Ç–≤–∏–µ'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üìúüïäÔ∏è‚öîÔ∏è',
    options: ['–õ–µ–¥–æ–≤–æ–µ –ø–æ–±–æ–∏—â–µ', '–†–µ—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–∏–µ', '–§–µ–æ–¥–∞–ª—å–Ω–∞—è —Ä–∞–∑–¥—Ä–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üëë‚öîÔ∏èüè∞',
    options: ['–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π', '–ü—ë—Ç—Ä I', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–≤—Å–∫–∏–π', '–î–º–∏—Ç—Ä–∏–π –î–æ–Ω—Å–∫–æ–π'],
    correctIndex: 0,
    era: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),

  // –ù–û–í–û–ï –í–†–ï–ú–Ø ‚Äî –ò–°–¢–û–†–ò–Ø –†–û–°–°–ò–ò
  EmojiQuestion(
    emojis: 'üëë‚öîÔ∏èüõ≥Ô∏è',
    options: ['–ü–µ—Ç—Ä–æ–≤—Å–∫–∏–µ —Ä–µ—Ñ–æ—Ä–º—ã', '–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞', '–ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏', '–≠–ø–æ—Ö–∞ –¥–≤–æ—Ä—Ü–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–æ–≤'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: '‚öôÔ∏èüè≠üöÇ',
    options: ['–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–æ—Å—Å–∏–∏', '–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è –≤ –ï–≤—Ä–æ–ø–µ', '–†—É—Å—Å–∫–æ-—è–ø–æ–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üìúüìà‚öñÔ∏è',
    options: ['–ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∫—Ä–µ—Å—Ç—å—è–Ω', '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –°–°–°–†', '–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', '–£–∫–∞–∑ –æ –µ–¥–∏–Ω–æ–Ω–∞—Å–ª–µ–¥–∏–∏'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üéñÔ∏è‚öîÔ∏èüèÖ',
    options: ['–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ 1812 –≥–æ–¥–∞', '–†—É—Å—Å–∫–æ-—Ç—É—Ä–µ—Ü–∫–∞—è –≤–æ–π–Ω–∞', '–ö—Ä—ã–º—Å–∫–∞—è –≤–æ–π–Ω–∞', '–í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üë∏‚öîÔ∏èüõ°Ô∏è',
    options: ['–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–µ–ª–∏–∫–∞—è', '–ü—ë—Ç—Ä I', '–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä II'],
    correctIndex: 0,
    era: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),

  // –°–û–í–†–ï–ú–ï–ù–ù–û–°–¢–¨ ‚Äî –ò–°–¢–û–†–ò–Ø –†–û–°–°–ò–ò
  EmojiQuestion(
    emojis: 'üö©üî®üåæ',
    options: ['–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è', '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üõ†Ô∏èüöÇüè≠',
    options: ['–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –°–°–°–†', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è', '–†–µ—Ñ–æ—Ä–º—ã –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ II', '–ü–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üí£üåç‚öîÔ∏è',
    options: ['–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞', '–ü–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞', '–í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞', '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üßë‚Äçü§ù‚Äçüßë‚úäüìú',
    options: ['–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞', '–†–µ–≤–æ–ª—é—Ü–∏—è 1905 –≥–æ–¥–∞', '–†–∞—Å–ø–∞–¥ –°–°–°–†', '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
  EmojiQuestion(
    emojis: 'üèõÔ∏èüìâüá∑üá∫',
    options: ['–†–∞—Å–ø–∞–¥ –°–°–°–†', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏', '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è 1993 –≥–æ–¥–∞', '–í–æ–π–Ω–∞ –≤ –ß–µ—á–Ω–µ'],
    correctIndex: 0,
    era: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
    historyType: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
  ),
];
